name: üöÄ Build and Deploy Strapi to Production

# Trigger the workflow on push to main, manual dispatch, and PR merge
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests and security scans'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment (skip health checks)'
        required: false
        default: false
        type: boolean

# Define environment variables globally
env:
  NODE_ENV: production
  DEPLOYMENT_URL: https://strapi.dmazing.studio
  PM2_APP_NAME: dmazing-strapi
  TARGET_DIR: /var/www/dmazing-strapi
  BACKUP_DIR: /var/backups/dmazing-strapi

# Ensure only one deployment runs at a time
concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  # =================================================
  #           SECURITY & VALIDATION JOB
  # =================================================
  security-check:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: üîç Checkout Repository
        uses: actions/checkout@v4

      - name: üîí Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üõ°Ô∏è Run Security Audit
        run: |
          echo "üõ°Ô∏è Running security audit..."
          # Focus on high/critical vulnerabilities for production dependencies
          npm audit --audit-level=high --production || echo "‚ö†Ô∏è Some security issues found - check npm audit for details"
          echo "‚úÖ Security audit completed"

      - name: üîç Lint Code
        run: |
          npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0 || true

      - name: üß™ Run Type Check
        run: npx tsc --noEmit

  # =================================================
  #      PRE-DEPLOYMENT: Environment Validation
  # =================================================
  pre-deployment:
    runs-on: ubuntu-latest
    needs: [security-check]
    if: always() && (needs.security-check.result == 'success' || needs.security-check.result == 'skipped')
    
    outputs:
      deployment-id: ${{ steps.deploy-id.outputs.deployment-id }}
      
    steps:
      - name: üìã Generate Deployment ID
        id: deploy-id
        run: echo "deployment-id=deploy-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: üîç Validate Server Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üîç Validating server environment..."
            
            # Check if target directory exists
            if [ ! -d "/var/www/dmazing-strapi" ]; then
              echo "üî¥ Target directory /var/www/dmazing-strapi does not exist!"
              exit 1
            fi
            
            # Check if .env file exists
            if [ ! -f "/var/www/dmazing-strapi/.env" ]; then
              echo "üî¥ .env file not found in /var/www/dmazing-strapi!"
              exit 1
            fi
            
            # Check PM2 status
            if ! command -v pm2 &> /dev/null; then
              echo "üî¥ PM2 is not installed!"
              exit 1
            fi
            
            # Check disk space (require at least 2GB free)
            AVAILABLE=$(df /var/www/dmazing-strapi | awk 'NR==2{print $4}')
            if [ $AVAILABLE -lt 2097152 ]; then
              echo "üî¥ Insufficient disk space! Available: ${AVAILABLE}KB"
              exit 1
            fi
            
            echo "‚úÖ Server environment validation passed"

  # =================================================
  #           BUILD JOB: Enhanced Build Process
  # =================================================
  build:
    runs-on: ubuntu-latest
    needs: [pre-deployment]
    
    env:
      NODE_ENV: production
      URL: https://strapi.dmazing.studio
      
    steps:
      - name: üîç Checkout Repository
        uses: actions/checkout@v4

      - name: üîí Setup Node.js with Caching
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: |
          echo "üì¶ Installing production dependencies..."
          npm ci --only=production
          echo "‚úÖ Dependencies installed successfully"

      - name: üèóÔ∏è Build Strapi Application
        run: |
          echo "üèóÔ∏è Building Strapi application..."
          npm run build
          echo "‚úÖ Build completed successfully"

      - name: üìä Build Verification
        run: |
          echo "üìä Verifying build artifacts..."
          if [ ! -d "dist" ]; then
            echo "üî¥ Dist directory not found!"
            exit 1
          fi
          
          if [ ! -d "dist/build" ]; then
            echo "üî¥ Admin panel build directory not found!"
            exit 1
          fi
          
          if [ ! -f "dist/build/index.html" ]; then
            echo "üî¥ Admin panel index.html not found!"
            exit 1
          fi
          
          echo "‚úÖ Build verification passed"
          echo "üìä Build artifacts:"
          echo "  - dist/ (compiled backend code)"
          echo "  - dist/build/ (admin panel)"
          ls -la dist/

      - name: üì¶ Create Optimized Deployment Package
        run: |
          echo "üì¶ Creating deployment package..."
          mkdir -p deployment-package
          
          # Copy essential files and directories  
          cp -r dist deployment-package/
          cp -r node_modules deployment-package/
          cp -r src deployment-package/
          cp -r config deployment-package/
          cp -r database deployment-package/
          cp -r public deployment-package/
          
          # Copy configuration files
          cp package.json deployment-package/
          cp package-lock.json deployment-package/
          cp tsconfig.json deployment-package/
          cp favicon.png deployment-package/ 2>/dev/null || echo "‚ö†Ô∏è No favicon found"
          
          # Create deployment metadata
          echo "DEPLOYMENT_ID=${{ needs.pre-deployment.outputs.deployment-id }}" > deployment-package/.deployment-info
          echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-package/.deployment-info
          echo "COMMIT_SHA=${{ github.sha }}" >> deployment-package/.deployment-info
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> deployment-package/.deployment-info
          
          # Create compressed package
          tar -czvf deployment-package.tar.gz -C deployment-package .
          
          # Verify package
          if [ ! -f "deployment-package.tar.gz" ]; then
            echo "üî¥ Failed to create deployment package!"
            exit 1
          fi
          
          echo "‚úÖ Deployment package created successfully"
          echo "üì¶ Package size: $(du -h deployment-package.tar.gz | cut -f1)"

      - name: üì§ Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: strapi-build-${{ needs.pre-deployment.outputs.deployment-id }}
          path: deployment-package.tar.gz
          retention-days: 30

  # =================================================
  #     DEPLOYMENT JOB: Enhanced Deployment Process
  # =================================================
  deploy:
    runs-on: ubuntu-latest
    needs: [pre-deployment, build]
    environment: production
    
    steps:
      - name: üì• Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: strapi-build-${{ needs.pre-deployment.outputs.deployment-id }}

      - name: üì§ Transfer Package to Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment-package.tar.gz"
          target: "/home/${{ secrets.USERNAME }}"

      - name: üöÄ Deploy with Rollback Support
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 600s
          script: |
            set -e  # Exit on any error
            
            DEPLOYMENT_ID="${{ needs.pre-deployment.outputs.deployment-id }}"
            TARGET_DIR="/var/www/dmazing-strapi"
            BACKUP_DIR="/var/backups/dmazing-strapi"
            PM2_APP_NAME="dmazing-strapi"
            
            echo "üöÄ Starting deployment: $DEPLOYMENT_ID"
            
            # Create backup directory if it doesn't exist
            mkdir -p "$BACKUP_DIR" 2>/dev/null || echo "‚ö†Ô∏è Cannot create backup dir - will backup to home"
            BACKUP_DIR_FINAL="$BACKUP_DIR"
            if [ ! -w "$BACKUP_DIR" ]; then
              BACKUP_DIR_FINAL="/home/${{ secrets.USERNAME }}/backups"
              mkdir -p "$BACKUP_DIR_FINAL"
              echo "‚ÑπÔ∏è Using backup directory: $BACKUP_DIR_FINAL"
            fi
            
            # Create backup of current deployment
            echo "üíæ Creating backup of current deployment..."
            if [ -d "$TARGET_DIR" ]; then
              BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
              cp -r "$TARGET_DIR" "$BACKUP_DIR_FINAL/$BACKUP_NAME" 2>/dev/null || echo "‚ö†Ô∏è Backup failed - continuing deployment"
              echo "‚úÖ Backup attempted: $BACKUP_DIR_FINAL/$BACKUP_NAME"
            fi
            
            # Prepare new deployment directory
            echo "üìÅ Preparing deployment directory..."
            TEMP_DIR="/tmp/strapi-deploy-$DEPLOYMENT_ID"
            mkdir -p "$TEMP_DIR"
            
            # Extract new version to temporary directory
            echo "üì¶ Extracting new version..."
            tar -xzf "/home/${{ secrets.USERNAME }}/deployment-package.tar.gz" -C "$TEMP_DIR"
            
            # Verify essential files
            echo "üîç Verifying deployment package..."
            if [ ! -f "$TEMP_DIR/package.json" ]; then
              echo "üî¥ package.json not found in deployment package!"
              exit 1
            fi
            
            # Preserve environment file and uploads
            echo "üíæ Preserving environment and user data..."
            if [ -f "$TARGET_DIR/.env" ]; then
              cp "$TARGET_DIR/.env" "$TEMP_DIR/.env"
            fi
            
            if [ -d "$TARGET_DIR/public/uploads" ]; then
              mkdir -p "$TEMP_DIR/public"
              cp -r "$TARGET_DIR/public/uploads" "$TEMP_DIR/public/"
            fi
            
            # Stop the application gracefully
            echo "‚èπÔ∏è Stopping application..."
            if pm2 list | grep -q "$PM2_APP_NAME"; then
              pm2 stop "$PM2_APP_NAME" || true
            fi
            
            # Replace application files atomically
            echo "üîÑ Deploying new version..."
            rm -rf "$TARGET_DIR.old" 2>/dev/null || true
            if [ -d "$TARGET_DIR" ]; then
              mv "$TARGET_DIR" "$TARGET_DIR.old" 2>/dev/null || {
                echo "‚ö†Ô∏è Cannot move existing directory - trying copy and remove"
                cp -r "$TARGET_DIR" "$TARGET_DIR.old" || echo "‚ö†Ô∏è Backup copy failed"
                rm -rf "$TARGET_DIR" || {
                  echo "üî¥ Cannot remove existing directory. Please ensure ${{ secrets.USERNAME }} owns $TARGET_DIR"
                  exit 1
                }
              }
            fi
            mv "$TEMP_DIR" "$TARGET_DIR" || {
              echo "üî¥ Cannot move new deployment. Please ensure ${{ secrets.USERNAME }} has write access to $(dirname $TARGET_DIR)"
              exit 1
            }
            
            # Set proper permissions
            echo "üîê Setting permissions..."
            find "$TARGET_DIR" -type f -exec chmod 644 {} \;
            find "$TARGET_DIR" -type d -exec chmod 755 {} \;
            chmod +x "$TARGET_DIR/node_modules/.bin/"* 2>/dev/null || true
            
            # Ensure .env file exists
            if [ ! -f "$TARGET_DIR/.env" ]; then
              echo "üî¥ CRITICAL: .env file not found after deployment!"
              # Attempt rollback
              if [ -d "$TARGET_DIR.old" ]; then
                echo "üîÑ Attempting rollback..."
                rm -rf "$TARGET_DIR"
                mv "$TARGET_DIR.old" "$TARGET_DIR"
              fi
              exit 1
            fi
            
            # Navigate to application directory
            cd "$TARGET_DIR"
            
            # Start/Reload the application
            echo "‚ñ∂Ô∏è Starting application..."
            if pm2 list | grep -q "$PM2_APP_NAME"; then
              pm2 reload "$PM2_APP_NAME" --update-env
            else
              pm2 start npm --name "$PM2_APP_NAME" -- start
            fi
            
            # Save PM2 configuration
            pm2 save
            
            # Clean up
            echo "üßπ Cleaning up..."
            rm -f "/home/${{ secrets.USERNAME }}/deployment-package.tar.gz"
            rm -rf "$TARGET_DIR.old" 2>/dev/null || true
            
            # Display deployment info
            echo "üìã Deployment Information:"
            cat "$TARGET_DIR/.deployment-info" 2>/dev/null || echo "No deployment info available"
            
            echo "‚úÖ Deployment completed successfully!"

  # =================================================
  #        POST-DEPLOYMENT: Health Checks & Validation
  # =================================================
  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy, pre-deployment]
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: ‚è≥ Wait for Application Startup
        run: |
          echo "‚è≥ Waiting for application to start..."
          sleep 30

      - name: üè• Health Check
        run: |
          echo "üè• Performing health checks..."
          
          # Check if the site is accessible
          for i in {1..10}; do
            if curl -f -s -o /dev/null "https://strapi.dmazing.studio/admin" || curl -f -s -o /dev/null "https://strapi.dmazing.studio"; then
              echo "‚úÖ Application is responding (attempt $i)"
              break
            else
              echo "‚è≥ Waiting for application... (attempt $i/10)"
              if [ $i -eq 10 ]; then
                echo "üî¥ Application health check failed!"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: üîç Server Status Verification
        if: github.event.inputs.force_deploy != 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üîç Verifying server status..."
            
            # Check PM2 status
            if ! pm2 show "dmazing-strapi" > /dev/null 2>&1; then
              echo "üî¥ PM2 process not found!"
              exit 1
            fi
            
            # Get PM2 status
            PM2_STATUS=$(pm2 jlist | jq -r '.[] | select(.name=="dmazing-strapi") | .pm2_env.status')
            if [ "$PM2_STATUS" != "online" ]; then
              echo "üî¥ Application is not running properly. Status: $PM2_STATUS"
              exit 1
            fi
            
            # Check application logs for errors
            echo "üìã Recent application logs:"
            pm2 logs "dmazing-strapi" --lines 20 --nostream || true
            
            # Check disk usage
            echo "üíæ Disk usage:"
            df -h "/var/www/dmazing-strapi"
            
            # Check memory usage
            echo "üß† Memory usage:"
            free -h
            
            echo "‚úÖ All health checks passed!"

      - name: üéâ Deployment Success Notification
        run: |
          echo "üéâ Deployment to https://strapi.dmazing.studio completed successfully!"
          echo "üìÖ Deployment ID: ${{ needs.pre-deployment.outputs.deployment-id }}"
          echo "üîó Site URL: https://strapi.dmazing.studio"
          echo "üìä Commit: ${{ github.sha }}"

  # =================================================
  #        ROLLBACK JOB: Emergency Rollback
  # =================================================
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy, post-deployment]
    if: failure() && needs.deploy.result == 'success'
    
    steps:
      - name: üîÑ Emergency Rollback
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üö® Initiating emergency rollback..."
            
            BACKUP_DIR="/var/backups/dmazing-strapi"
            BACKUP_DIR_FALLBACK="/home/${{ secrets.USERNAME }}/backups"
            TARGET_DIR="/var/www/dmazing-strapi"
            PM2_APP_NAME="dmazing-strapi"
            
            # Find the latest backup (try both directories)
            if [ -d "$BACKUP_DIR" ] && [ "$(ls -A $BACKUP_DIR 2>/dev/null)" ]; then
              LATEST_BACKUP=$(ls -t "$BACKUP_DIR" | head -n 1)
              BACKUP_DIR_FINAL="$BACKUP_DIR"
            elif [ -d "$BACKUP_DIR_FALLBACK" ] && [ "$(ls -A $BACKUP_DIR_FALLBACK 2>/dev/null)" ]; then
              LATEST_BACKUP=$(ls -t "$BACKUP_DIR_FALLBACK" | head -n 1)
              BACKUP_DIR_FINAL="$BACKUP_DIR_FALLBACK"
            else
              LATEST_BACKUP=""
            fi
            
            if [ -z "$LATEST_BACKUP" ]; then
              echo "üî¥ No backup found for rollback!"
              exit 1
            fi
            
            echo "üîÑ Rolling back to: $LATEST_BACKUP"
            
            # Stop current application
            pm2 stop "$PM2_APP_NAME" || true
            
            # Replace with backup
            rm -rf "$TARGET_DIR.failed" 2>/dev/null || true
            mv "$TARGET_DIR" "$TARGET_DIR.failed" 2>/dev/null || rm -rf "$TARGET_DIR"
            cp -r "$BACKUP_DIR_FINAL/$LATEST_BACKUP" "$TARGET_DIR" || {
              echo "üî¥ Rollback failed - cannot copy backup!"
              exit 1
            }
            
            # Restart application
            cd "$TARGET_DIR"
            pm2 start "$PM2_APP_NAME" || pm2 restart "$PM2_APP_NAME"
            
            echo "‚úÖ Rollback completed!"

      - name: üìß Rollback Notification
        run: |
          echo "üö® ROLLBACK EXECUTED"
          echo "Deployment failed and was automatically rolled back"
          echo "Please check the logs and fix the issues before attempting to deploy again"
